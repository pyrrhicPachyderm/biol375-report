#!/usr/bin/env Rscript

#Reads two csv files with two columns
#Both have the same set of sites in the first column
#One has a predictor variable in the second, the other a response

#Optionally plots the regression line
#Optionally gives a file with the r^2, F and p values, formatted for TeX.

set.seed(5)

library(tidyverse)
library(magrittr)
library(ggrepel)
library(optparse)

option_list <- list(
	make_option(c("-p", "--plotfile"), type = "character", action="store", default=FALSE, dest="plot_file",
		help="An SVG file to output the plot to"),
	make_option(c("-t", "--texfile"), type = "character", action="store", default=FALSE, dest="tex_file",
		help="A TeX file to output the statistics to"),
	make_option(c("-x", "--xlab"), type = "character", action="store", default="predictor", dest="x_label",
		help="The x-axis label for the graph [default: %default]"),
	make_option(c("-y", "--ylab"), type = "character", action="store", default="response", dest="y_label",
		help="The y-axis label for the graph [default: %default]"),
	make_option(c("-w", "--width"), type = "numeric", action="store", default="7", dest="plot_width",
		help="The width of the plot, in inches [default: %default]"),
	make_option(c("-v", "--height"), type = "numeric", action="store", default="7", dest="plot_height",
		help="The height of the plot, in inches [default: %default]")
)
parser <- OptionParser(usage = "%prog [options] <response CSV> <predictor CSV>", option_list=option_list)
arguments <- parse_args(parser, positional_arguments = 2)

response_file <- arguments$args[1]
predictor_file <- arguments$args[2]

plot_file <- arguments$options$plot_file
tex_file <- arguments$options$tex_file
x_label <- arguments$options$x_label
y_label <- arguments$options$y_label
plot_width <- arguments$options$plot_width
plot_height <- arguments$options$plot_height

is_plot <- is.character(plot_file) && (plot_file != "FALSE")
is_tex <- is.character(tex_file) && (tex_file != "FALSE")

response_data <- read_csv(response_file)
names(response_data) <- c("site", "response")
predictor_data <- read_csv(predictor_file)
names(predictor_data) <- c("site", "predictor")

data <- inner_join(response_data, predictor_data, by = "site")

if(is_plot) {
	pdf(plot_file, width=plot_width, height=plot_height)
	plot_object <- ggplot(data) +
		aes(x=predictor, y=response, label=site) +
		expand_limits(y=0) +
		geom_smooth(method='lm',formula=y~x) +
		geom_point() +
		geom_text_repel() +
		xlab(x_label) +
		ylab(y_label)
	plot(plot_object)
	dev.off()
}

if(is_tex) {
	model <- lm(response~predictor, data=data)
	
	r2 <- summary(model)$r.squared
	numerator_df <- summary(model)$fstatistic['numdf']
	denominator_df <- summary(model)$fstatistic['dendf']
	f_val <- summary(model)$fstatistic['value']
	p_val <- summary(model)$coefficients[-1,4]
	
	p_val_string <- sprintf("= %.3f", p_val)
	if(p_val_string == "= 0.000") {
		p_val_string <- sprintf("< 0.001")
	}
	
	out_string <- sprintf("$r^2 = %.3f$, $F_{%d,%d} = %.2f$, $p %s$",
		r2, numerator_df, denominator_df, f_val, p_val_string)
	
	file_connection <- file(tex_file)
	writeLines(out_string, file_connection)
	close(file_connection)
}
